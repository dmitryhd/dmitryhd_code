diff -ur 1/samba-3.0.9/source/client/client.c samba-3.0.9/source/client/client.c
--- 1/samba-3.0.9/source/client/client.c	2004-11-16 06:03:35.000000000 +0300
+++ samba-3.0.9/source/client/client.c	2004-12-11 15:12:39.000000000 +0300
@@ -42,6 +42,18 @@
 static BOOL grepable=False;
 static char *cmdstr = NULL;
 
+/* SMBSearch extension */
+static int cmdline_first_id = 0;
+static int cmdline_parent_id = 0;
+static char *cmdline_dumpfile = 0;
+static pstring global_share_name;
+static int is_making_dump = 0;
+static int current_file_id = 0;
+static int current_parent_id = 0;
+static pstring dump_file_list_file;
+static FILE *dump_file_list;
+static int dump_file_size = 0; /* total current size of dump file */
+
 static int io_bufsize = 64512;
 
 static int name_type = 0x20;
@@ -102,6 +114,32 @@
 /* some forward declarations */
 static struct cli_state *do_connect(const char *server, const char *share);
 
+void add_file(file_info *finfo)
+{
+	int flags = 0;
+
+	flags = (finfo->mode & aDIR) ? 1 : 0;
+	dump_file_size += fprintf(dump_file_list, "%d\t%d\t%s\t%llu\t%d\n", current_file_id, 
+			current_parent_id, finfo->name,
+			(unsigned long long int)finfo->size, flags);
+	current_file_id++;
+}
+
+int start_listing()
+{
+	dump_file_list = fopen(dump_file_list_file, "a");
+	if (dump_file_list == NULL) {
+		printf("Fatal error: cannot open %s for writing\n", dump_file_list_file);
+		return 1;
+	}
+	return 0;
+}
+
+void  finish_listing()
+{
+	fclose(dump_file_list);
+}
+
 /****************************************************************************
  Write to a local file with CR/LF->LF translation if appropriate. Return the 
  number taken from the buffer. This may not equal the number written.
@@ -329,15 +367,25 @@
 
 static void display_finfo(file_info *finfo)
 {
-	if (do_this_one(finfo)) {
-		time_t t = finfo->mtime; /* the time is assumed to be passed as GMT */
-		d_printf("  %-30s%7.7s %8.0f  %s",
-			 finfo->name,
-			 attrib_string(finfo->mode),
-			 (double)finfo->size,
-			 asctime(LocalTime(&t)));
-		dir_total += finfo->size;
-	}
+	/* SMBSearch extensions */
+	if (!is_making_dump) {
+		if (do_this_one(finfo)) {
+			time_t t = finfo->mtime; /* the time is assumed to be passed as GMT */
+			DEBUG(0,("  %-30s%7.7s %8.0f  %s",
+						finfo->name,
+						attrib_string(finfo->mode),
+						(double)finfo->size,
+						asctime(LocalTime(&t))));
+			dir_total += finfo->size;
+		}
+	} else {
+		char *name = finfo->name;
+		if (name[0] == '.') {
+			if (name[1] == 0) return;
+			if ((name[1] == '.') && (name[2] == 0)) return;
+		}
+		add_file(finfo);
+ 	}
 }
 
 /****************************************************************************
@@ -420,7 +468,7 @@
 static void add_to_do_list_queue(const char* entry)
 {
 	char *dlq;
-	long new_end = do_list_queue_end + ((long)strlen(entry)) + 1;
+	long new_end = do_list_queue_end + ((long)strlen(entry)) + 5;
 	while (new_end > do_list_queue_size) {
 		do_list_queue_size *= 2;
 		DEBUG(4,("enlarging do_list_queue to %d\n",
@@ -439,6 +487,7 @@
 	if (do_list_queue) {
 		safe_strcpy_base(do_list_queue + do_list_queue_end, 
 				 entry, do_list_queue, do_list_queue_size);
+		*(int*)(do_list_queue + new_end - 4) = current_file_id-1;
 		do_list_queue_end = new_end;
 		DEBUG(4,("added %s to do_list_queue (start=%d, end=%d)\n",
 			 entry, (int)do_list_queue_start, (int)do_list_queue_end));
@@ -453,7 +502,7 @@
 static void remove_do_list_queue_head(void)
 {
 	if (do_list_queue_end > do_list_queue_start) {
-		do_list_queue_start += strlen(do_list_queue_head()) + 1;
+		do_list_queue_start += strlen(do_list_queue_head()) + 5;
 		adjust_do_list_queue();
 		DEBUG(4,("removed head of do_list_queue (start=%d, end=%d)\n",
 			 (int)do_list_queue_start, (int)do_list_queue_end));
@@ -510,6 +559,8 @@
 void do_list(const char *mask,uint16 attribute,void (*fn)(file_info *),BOOL rec, BOOL dirs)
 {
 	static int in_do_list = 0;
+	/* Alex, 14.02.03, total file count limit */
+	static int total_file_count = 0;
 
 	if (in_do_list && rec) {
 		fprintf(stderr, "INTERNAL ERROR: do_list called recursively when the recursive flag is true\n");
@@ -522,6 +573,10 @@
 	do_list_dirs = dirs;
 	do_list_fn = fn;
 
+	if (start_listing() != 0) {
+		return;
+	}
+
 	if (rec) {
 		init_do_list_queue();
 		add_to_do_list_queue(mask);
@@ -538,8 +593,16 @@
 			pstrcpy(head, do_list_queue_head());
 			cli_list(cli, head, attribute, do_list_helper, NULL);
 			remove_do_list_queue_head();
+			total_file_count++;
+			if (dump_file_size > 10000000) {
+				in_do_list = 0;
+				reset_do_list_queue();
+				finish_listing();
+				return;
+			}
 			if ((! do_list_queue_empty()) && (fn == display_finfo)) {
 				char* next_file = do_list_queue_head();
+				current_parent_id = *(int *)(next_file + strlen(next_file) + 1);
 				char* save_ch = 0;
 				if ((strlen(next_file) >= 2) &&
 				    (next_file[strlen(next_file) - 1] == '*') &&
@@ -548,7 +611,7 @@
 						strlen(next_file) - 2;
 					*save_ch = '\0';
 				}
-				d_printf("\n%s\n",next_file);
+				/* d_printf("\n%s\n",next_file); */
 				if (save_ch) {
 					*save_ch = '\\';
 				}
@@ -562,6 +625,7 @@
 
 	in_do_list = 0;
 	reset_do_list_queue();
+	finish_listing();
 }
 
 /****************************************************************************
@@ -582,7 +646,7 @@
 		if(mask[strlen(mask)-1]!='\\')
 			pstrcat(mask,"\\");
 	} else {
-		*mask = '\0';
+		pstrcpy(mask, "\\");
 	}
 	
 	if (next_token_nr(NULL,buf,NULL,sizeof(buf))) {
@@ -595,9 +659,11 @@
 		pstrcat(mask,"\\*");
 	}
 
+	/* commented by Alex */
 	do_list(mask, attribute, display_finfo, recurse, True);
 
-	rc = do_dskattr();
+	/* rc = do_dskattr(); */
+	rc = 0;
 
 	DEBUG(3, ("Total bytes listed: %.0f\n", dir_total));
 
@@ -2202,7 +2268,7 @@
 	   in any of these fields, they can corrupt the output.  We
 	   should remove them. */
 	if (!grepable) {
-		d_printf("\t%-15s %-10.10s%s\n",
+		d_printf("\t%-15.15s%-10.10s%s\n",
                		name,typestr,comment);
 	} else {
 		d_printf ("%s|%s|%s\n",typestr,name,comment);
@@ -2796,6 +2862,7 @@
 		*sharename = 0;
 		sharename++;
 	}
+	pstrcpy(global_share_name, sharename);
 
 	server_n = server;
 	
@@ -3051,6 +3118,9 @@
 		{ "send-buffer", 'b', POPT_ARG_INT, &io_bufsize, 'b', "Changes the transmit/send buffer", "BYTES" },
 		{ "port", 'p', POPT_ARG_INT, &port, 'p', "Port to connect to", "PORT" },
 		{ "grepable", 'g', POPT_ARG_NONE, NULL, 'g', "Produce grepable output" },
+ 		{ "firstid", 'f', POPT_ARG_INT, &cmdline_first_id, 'f', "start id when dumping", "FIRSTID" },
+ 		{ "parentid", 'y', POPT_ARG_INT, &cmdline_parent_id, 'y', "parent id when dumping", "PARENTID" },
+ 		{ "filedump", 'e', POPT_ARG_STRING, &cmdline_dumpfile, 'e', "dumpfile", "DUMPFILE" },
 		POPT_COMMON_SAMBA
 		POPT_COMMON_CONNECTION
 		POPT_COMMON_CREDENTIALS
@@ -3147,6 +3217,17 @@
 		case 'g':
 			grepable=True;
 			break;
+		/* SMBSearch extensions */
+		case 'f':
+			is_making_dump = 1;
+			current_file_id = cmdline_first_id;
+			break;
+		case 'y':
+			current_parent_id = cmdline_parent_id;
+			break;
+		case 'e':
+			pstrcpy(dump_file_list_file, cmdline_dumpfile);
+			break;
 		}
 	}
 
