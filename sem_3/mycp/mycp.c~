/* TITLE: mycp */
/* Short description: just my variant of unix's cp util with
 * -v,i,p,f options */
/* Last modification: DmitryKh - 19.09.09*/
/* Written by Dmitry Khodakov gr. 817*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <getopt.h>
/* ERRORS */
#define EFILE 10

/* named vars */
#define BUFFSIZE 255

int is_preserve = 0;
int is_interactive = 0;
int is_verbose = 0;
int is_force = 0;
int is_recursive = 0;

int is_dir( char *name);
void copy_file ( char *dst_name, char *src_name);
void copy_dir (char * dst_name, char * src_name);
void print_help();
int is_name_like_dir(char *name);
int remove_last_slash(char *name);
int add_last_slash(char *name);

int main( int argc, char *argv[])
{
	int par_cnt = 0;
	char *params[10];
	/* Options */
	/* Parsing aguments */
	int option_index = 0, c;
	struct option long_options[] = {
		{"verbose",	0,	0,	'v'},
		{"recursive",	0,	0,	'r'},
		{"help",	0,	0,	'h'},
		{NULL,		0,	0,	0}
	};
	while(1){
		c = getopt_long ( argc, argv, "vhr", long_options, &option_index );
		if ( c == -1)
			break;
		switch ( c) {
			case 'v': is_verbose = 1; break;
			case 'h': print_help(); return 0;
			case 'r': is_recursive = 1; break;
			default: break;
		}
	}
	while( optind < argc)
		params[ par_cnt++ ] = argv[ optind++ ];

	par_cnt--;
	if ( par_cnt < 1){
		printf("need 2+ args\n");
		return 0;
	}
	char * dst_name = NULL, * src_name = NULL;
	src_name = params[0];
	dst_name = params[par_cnt];
	if( is_name_like_dir ( dst_name))
		mkdir ( dst_name, 0777);
	if( is_dir ( dst_name) ){
		int i;
		if ( is_verbose) printf("to dir: %s\n", dst_name);
		char dst_path[BUFFSIZE];
		for ( i = 0; i < par_cnt; i++ ){
			//if ( is_verbose) printf("%s ->%s\n",params[i], dst_path);
			if ( is_dir ( params[i]) ){
				if( is_recursive )
					copy_dir ( dst_name, params[i]);
				else
					printf("%s is a dir\n", params[i]);
			}
			else{
				strcpy ( dst_path, dst_name);
				strcat ( dst_path, params[i]);
				copy_file ( dst_path, params[i]);
			}
		}
		return 0;
	}
	
	copy_file ( dst_name, src_name );
		
	return 0;
}

int is_name_like_dir(char *name){
	int i;
	for(i=0;name[i]!=0;i++);
	return (name[--i]=='/')?1:0;
}
int remove_last_slash(char *name)
{
	int i;
	for(i=0;name[i]!=0;i++);
	i--;
	if ( name[i] == '/' && name[i-1] == '/')
		name[i] = 0;
	return 0;
}
int add_last_slash(char *name)
{
	int i;
	for( i = 0; name[i]!=0 ;i++);
	i--;
	if ( name[i] != '/'){
		name[++i] = '/';
		name[++i] = 0;
	}
	return 0;
}

char * get_last_dir (char * path)
{
	char *ret = (char *)calloc ( BUFFSIZE, sizeof(char));
	int i, j,  first = 0;
	for ( i = 0; path[i] != 0; i++);
	i--;
	for (j = i; j>=0; j--){
		if(!first && path[j]=='/'){
			first = j;
			continue;
		}
		if(first && path[j]=='/'){
			break;
		}
	}
	j++;
	for(i = j; i < first; i++)
		ret[i-j] = path[i];
	ret[i-j] = 0;
	//printf("get last dir %s\n", ret);
	return ret;
}
char * get_last_file (char * path)
{
	char *ret = (char *)calloc ( BUFFSIZE, sizeof(char));
	int i, j;
	for ( i = 0; path[i] != 0; i++);
	i--;
//	printf("%s size %d\n", path, i);
	int last = i;
	for (j = i; j>=0; j--){
		if(path[j]=='/'){
			//first = j;
			break;
		}
	}
	j++;
	//if(j == -1)
	//	j = 0;
	for(i = j; i <= last; i++)
		ret[i-j] = path[i];
	ret[i-j] = 0;
	return ret;
}

void copy_dir (char * dst_name, char * src_name)
{
	struct dirent *ds;
	char cur_path[BUFFSIZE];
	char new_dst_path[BUFFSIZE];
	char * path = src_name;
	char * last_src = get_last_dir(src_name);
	
	if ( is_verbose) printf("call copy dir %s -> %s\n", src_name, dst_name);
	//remove_last_slash ( dst_name);
	//remove_last_slash ( last_src);
	//printf("last = %s\n", last_src);
	remove_last_slash ( dst_name);
	strcpy ( new_dst_path, dst_name);
	strcat ( new_dst_path, last_src);
	add_last_slash ( new_dst_path);
	//printf("ls %s\n", last_src);
	//add_last_slash ( new_dst_path);
	mkdir ( new_dst_path, 0777);
	if ( is_verbose) printf(" copy dir %s -> %s\n", src_name, new_dst_path);

	DIR * dir;
	if (! (dir = opendir( src_name)) ){
		perror("can't open dir\n");
		return;
	}
	while(1) {
		ds = readdir( dir);
		if( !ds )
			break;
		if( strcmp(ds->d_name, ".")==0)
			continue;
		if( strcmp(ds->d_name, "..")==0)
			continue;
		strcpy ( cur_path, path);
		strcat ( cur_path, ds->d_name );
		//printf("current = %s\n", cur_path);
		if ( is_dir ( cur_path)){
			//strcpy ( new_dst_path, dst_name);
			//printf( "newdst = %s to cur path %s\n",new_dst_path, cur_path);
			strcat ( cur_path, "/");
			strcat ( new_dst_path, "/");
			copy_dir ( new_dst_path, cur_path);
		}
		else {
			//printf("%s is file\n", cur_path);
			char dst_path[BUFFSIZE];
			strcpy ( dst_path, new_dst_path);
			char *p = get_last_file(cur_path);
			//printf("%s last\n", p);
			strcat ( dst_path, get_last_file(cur_path));
			copy_file ( dst_path, cur_path);
		}
	}
}

void copy_file ( char *dst_name, char *src_name)
{
	/* copy file to file */ 
	/* Test if destination file already exist */ 
	int dst_fd, src_fd;
	int rd_cnt, wr_cnt;
	struct stat ss;
	char buff[BUFFSIZE];
	//printf( "\n%s\n", dst_name);
	if ( is_verbose) printf("file %s ->%s\n", src_name, dst_name);
	if((dst_fd = open(dst_name, O_WRONLY|O_CREAT)) < 0){
		perror("can't open destination for write\n");
		close(dst_fd);
		exit(1);
		printf("destination %s - already exist\n",dst_name);
	}

	if((src_fd = open(src_name,O_RDONLY)) < 0){
		perror("can't open source file");
		exit(EFILE);
	}
	/* Reading pieces from source */
	do
	{
		rd_cnt = read ( (int)src_fd, buff, BUFFSIZE);
		//printf("read %d from src\n",rd_cnt);
		wr_cnt = write ( dst_fd, buff, rd_cnt);
		//printf("write %d to dst\n",wr_cnt);
	}
	while(rd_cnt == BUFFSIZE);
	if (stat(src_name, &ss) == -1) {
		perror("stat");
		exit(1);
	}
	if ( chmod(dst_name, ss.st_mode) ){
		perror("chmod\n");
		exit(1);
	}

	if ( chown(dst_name, ss.st_uid, ss.st_gid) ){
		perror("chown\n");
		exit(1);
	}

	/* Close all descritpors */
	close(dst_fd);
	close(dst_fd);

}

void print_help()
{
	printf ( "nobody here help you =)\n");
}
int is_dir( char *name){
	struct stat ss;
	if( open ( name, O_RDONLY) == -1)
		return 0;
	if (stat(name, &ss) == -1) {
		perror("stat");
		exit(1);
	}
	return S_ISDIR(ss.st_mode)?1:0;
}

